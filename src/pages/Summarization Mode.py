from langchain.chains import llm
from langchain.chains.summarize import load_summarize_chain
from langchain.prompts import PromptTemplate
import __main__

initial_template = """
I am writing a grant proposal and I would like to summarize the National Science Foundation requirements set forth in the below text, nested between <TEXT> tags. Generate a comprehensive and specific overview of those requirements that will help me check my proposal. Your outline must be taken directly from the above text nested between the <TEXT> tags. If tabular data is important, include that too. If the provided information is insufficient to generate the outline, then do not do anything.
<TEXT>
{text}
<TEXT>
YOUR RESPONSE:"""
initial_prompt = PromptTemplate.from_template(initial_template)

refine_template = """
<TEXT>
{text}
<TEXT>
I am writing a grant proposal and I would like to summarize the National Science Foundation requirements set forth in the below text, nested between <TEXT> tags. Generate a comprehensive and specific outline of the important requirements that will help me check my proposal for compliance against these requirements by refining the following text nested between <CURRENT OUTLINE> tags, which is an incomplete outline that you generated by processing portions of the grant requirements document. 
New information used to refine the incomplete outline must be taken directly from the below text nested between the <TEXT> tags. If tabular data is important, include that too. If the provided information is insufficient to refine the outline, then do not modify it.
<CURRENT OUTLINE>
{existing_answer}
<CURRENT OUTLINE>
YOUR RESPONSE:
"""
refine_prompt = PromptTemplate.from_template(refine_template)
chain = load_summarize_chain(
    llm=llm,
    chain_type="refine",
    question_prompt=initial_prompt,
    refine_prompt=refine_prompt,
    return_intermediate_steps=True,
    input_key="text",
    output_key="output_text",
)

result = chain({"text": chunks}, return_only_outputs=True)
outline = result["output_text"]